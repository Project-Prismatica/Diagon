{"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/renderers/backdoor-factory.js":{"size":1942,"mtime":1553540308249,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/renderers/backdoor-factory.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ipcRenderer' is assigned a value but never used.","line":1,"column":9,"nodeType":"Identifier","endLine":1,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":1,"column":22,"nodeType":"Identifier","endLine":1,"endColumn":28},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":1,"column":53,"nodeType":"Program","fix":{"range":[52,54],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":2,"column":43,"nodeType":"Program","fix":{"range":[96,98],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","endLine":3,"endColumn":24,"fix":{"range":[98,101],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":3,"column":24,"nodeType":"Program","fix":{"range":[121,123],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":4,"column":1,"nodeType":"VariableDeclaration","endLine":4,"endColumn":28,"fix":{"range":[123,126],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":4,"column":28,"nodeType":"Program","fix":{"range":[150,152],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":5,"column":32,"nodeType":"Program","fix":{"range":[183,185],"text":"\n"}},{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":6,"column":1,"nodeType":null,"fix":{"range":[225,225],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":6,"column":41,"nodeType":"Program","fix":{"range":[225,227],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","endLine":7,"endColumn":49,"fix":{"range":[227,230],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":7,"column":49,"nodeType":"Program","fix":{"range":[275,277],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":8,"column":1,"nodeType":"VariableDeclaration","endLine":8,"endColumn":46,"fix":{"range":[277,280],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":8,"column":46,"nodeType":"Program","fix":{"range":[322,324],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":9,"column":1,"nodeType":"Program","fix":{"range":[324,326],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":10,"column":52,"nodeType":"Program","fix":{"range":[377,379],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":11,"column":1,"nodeType":"Program","fix":{"range":[379,381],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":12,"column":34,"nodeType":"Program","fix":{"range":[414,416],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":13,"column":28,"nodeType":"Program","fix":{"range":[443,445],"text":"\n"}},{"ruleId":"no-undef","severity":2,"message":"'settingsconf' is not defined.","line":14,"column":18,"nodeType":"Identifier","endLine":14,"endColumn":30},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":14,"column":50,"nodeType":"Program","fix":{"range":[494,496],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":15,"column":4,"nodeType":"Program","fix":{"range":[499,501],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":16,"column":35,"nodeType":"Program","fix":{"range":[535,537],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":17,"column":29,"nodeType":"Program","fix":{"range":[565,567],"text":"\n"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":18,"column":5,"nodeType":"VariableDeclaration","endLine":18,"endColumn":50},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":18,"column":5,"nodeType":"VariableDeclaration","endLine":18,"endColumn":50,"fix":{"range":[571,574],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":18,"column":50,"nodeType":"Program","fix":{"range":[616,618],"text":"\n"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":19,"column":5,"nodeType":"VariableDeclaration","endLine":19,"endColumn":52},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":19,"column":5,"nodeType":"VariableDeclaration","endLine":19,"endColumn":52,"fix":{"range":[622,625],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":19,"column":52,"nodeType":"Program","fix":{"range":[669,671],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":20,"column":27,"nodeType":"Program","fix":{"range":[697,699],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":21,"column":29,"nodeType":"Program","fix":{"range":[727,729],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":22,"column":1,"nodeType":"Program","fix":{"range":[729,731],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":23,"column":5,"nodeType":"Line","endLine":23,"endColumn":28,"fix":{"range":[737,737],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":23,"column":28,"nodeType":"Program","fix":{"range":[758,760],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":24,"column":5,"nodeType":"VariableDeclaration","endLine":24,"endColumn":76,"fix":{"range":[764,767],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":24,"column":5,"nodeType":"VariableDeclaration","endLine":24,"endColumn":76},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":24,"column":76,"nodeType":"Program","fix":{"range":[835,837],"text":"\n"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":25,"column":5,"nodeType":"VariableDeclaration","endLine":27,"endColumn":8},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":25,"column":5,"nodeType":"VariableDeclaration","endLine":27,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'request' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","endLine":25,"endColumn":16},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":25,"column":123,"nodeType":"FunctionExpression","endLine":27,"endColumn":6,"fix":{"range":[959,1014],"text":"(response) => {\r\n      response.pipe(file);\r\n    }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":25,"column":123,"nodeType":"FunctionExpression","endLine":27,"endColumn":6},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":25,"column":143,"nodeType":"Program","fix":{"range":[979,981],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":26,"column":27,"nodeType":"Program","fix":{"range":[1007,1009],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":27,"column":8,"nodeType":"Program","fix":{"range":[1016,1018],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":28,"column":1,"nodeType":"Program","fix":{"range":[1018,1020],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":29,"column":5,"nodeType":"Line","endLine":29,"endColumn":30,"fix":{"range":[1026,1026],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":29,"column":30,"nodeType":"Program","fix":{"range":[1049,1051],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":30,"column":5,"nodeType":"VariableDeclaration","endLine":30,"endColumn":77,"fix":{"range":[1055,1058],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":30,"column":5,"nodeType":"VariableDeclaration","endLine":30,"endColumn":77},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":30,"column":77,"nodeType":"Program","fix":{"range":[1127,1129],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":31,"column":5,"nodeType":"VariableDeclaration","endLine":33,"endColumn":8},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":31,"column":5,"nodeType":"VariableDeclaration","endLine":33,"endColumn":8},{"ruleId":"no-redeclare","severity":2,"message":"'request' is already defined.","line":31,"column":9,"nodeType":"Identifier","endLine":31,"endColumn":16},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":31,"column":131,"nodeType":"FunctionExpression","endLine":33,"endColumn":6},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":31,"column":131,"nodeType":"FunctionExpression","endLine":33,"endColumn":6,"fix":{"range":[1259,1315],"text":"(response) => {\r\n      response.pipe(file2);\r\n    }"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":31,"column":151,"nodeType":"Program","fix":{"range":[1279,1281],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":32,"column":28,"nodeType":"Program","fix":{"range":[1308,1310],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":33,"column":8,"nodeType":"Program","fix":{"range":[1317,1319],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":34,"column":1,"nodeType":"Program","fix":{"range":[1319,1321],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":35,"column":6,"nodeType":"Program","fix":{"range":[1326,1328],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":36,"column":1,"nodeType":"Program","fix":{"range":[1328,1330],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":37,"column":3,"nodeType":"Line","endLine":37,"endColumn":27,"fix":{"range":[1334,1334],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":37,"column":27,"nodeType":"Program","fix":{"range":[1356,1358],"text":"\n"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":38,"column":15,"nodeType":"BinaryExpression","endLine":38,"endColumn":80,"fix":{"range":[1372,1437],"text":"`C:\\\\Projects\\\\Prismatica\\\\Diagon\\\\Arsenal\\\\${  payload  }.json`"}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":38,"column":90,"nodeType":"FunctionExpression","endLine":58,"endColumn":4,"fix":{"range":[1447,1935],"text":"(err, contents) => {\r\n\r\n\r\n  //Exec all build commands\r\n  Object.entries(JSON.parse(contents).buildcmds).forEach(entry => {\r\n    let key = entry[0];\r\n    let value = entry[1];\r\n    console.log(value.cmd)\r\n\r\n    exec(value.cmd, (err, stdout, stderr) => {\r\n      if (err) {\r\n        // node couldn't execute the command\r\n        return;\r\n      }\r\n\r\n      // the *entire* stdout and stderr (buffered)\r\n      console.log(`${stdout}`);\r\n      console.log(`${stderr}`);\r\n    });\r\n  });\r\n  }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":38,"column":90,"nodeType":"FunctionExpression","endLine":58,"endColumn":4},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":38,"column":115,"nodeType":"Program","fix":{"range":[1472,1474],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":39,"column":1,"nodeType":"Program","fix":{"range":[1474,1476],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":40,"column":1,"nodeType":"Program","fix":{"range":[1476,1478],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":41,"column":3,"nodeType":"Line","endLine":41,"endColumn":28,"fix":{"range":[1482,1482],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":41,"column":28,"nodeType":"Program","fix":{"range":[1505,1507],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":42,"column":68,"nodeType":"Program","fix":{"range":[1574,1576],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is assigned a value but never used.","line":43,"column":9,"nodeType":"Identifier","endLine":43,"endColumn":12},{"ruleId":"prefer-const","severity":2,"message":"'key' is never reassigned. Use 'const' instead.","line":43,"column":9,"nodeType":"Identifier","endLine":43,"endColumn":12,"fix":{"range":[1580,1583],"text":"const"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":43,"column":24,"nodeType":"Program","fix":{"range":[1599,1601],"text":"\n"}},{"ruleId":"prefer-const","severity":2,"message":"'value' is never reassigned. Use 'const' instead.","line":44,"column":9,"nodeType":"Identifier","endLine":44,"endColumn":14,"fix":{"range":[1605,1608],"text":"const"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":44,"column":26,"nodeType":"Program","fix":{"range":[1626,1628],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":45,"column":27,"nodeType":"Program","fix":{"range":[1654,1656],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":46,"column":1,"nodeType":"Program","fix":{"range":[1656,1658],"text":"\n"}},{"ruleId":"no-shadow","severity":2,"message":"'err' is already declared in the upper scope.","line":47,"column":22,"nodeType":"Identifier","endLine":47,"endColumn":25},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":47,"column":47,"nodeType":"Program","fix":{"range":[1704,1706],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":48,"column":17,"nodeType":"Program","fix":{"range":[1722,1724],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":49,"column":45,"nodeType":"Program","fix":{"range":[1768,1770],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":50,"column":16,"nodeType":"Program","fix":{"range":[1785,1787],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":51,"column":8,"nodeType":"Program","fix":{"range":[1794,1796],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":52,"column":1,"nodeType":"Program","fix":{"range":[1796,1798],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":53,"column":51,"nodeType":"Program","fix":{"range":[1848,1850],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":54,"column":32,"nodeType":"Program","fix":{"range":[1881,1883],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":55,"column":32,"nodeType":"Program","fix":{"range":[1914,1916],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":56,"column":8,"nodeType":"Program","fix":{"range":[1923,1925],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":57,"column":6,"nodeType":"Program","fix":{"range":[1930,1932],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":58,"column":6,"nodeType":"Program","fix":{"range":[1937,1939],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":59,"column":2,"nodeType":"Program","fix":{"range":[1940,1942],"text":"\n"}}],"errorCount":93,"warningCount":3,"fixableErrorCount":78,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/containers/CounterPage.js":{"size":452,"mtime":1549766170404,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/containers/CounterPage.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/menus/Settings.js":{"size":2961,"mtime":1553219237443,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/menus/Settings.js","messages":[{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":1,"column":9,"nodeType":"Program","fix":{"range":[8,10],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":2,"column":42,"nodeType":"Program","fix":{"range":[51,53],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":3,"column":41,"nodeType":"Program","fix":{"range":[93,95],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":4,"column":1,"nodeType":"Program","fix":{"range":[95,97],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":5,"column":44,"nodeType":"Program","fix":{"range":[140,142],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":6,"column":1,"nodeType":"Program","fix":{"range":[142,144],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":7,"column":57,"nodeType":"Program","fix":{"range":[200,202],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'FormHelperText' is defined but never used.","line":8,"column":8,"nodeType":"Identifier","endLine":8,"endColumn":22},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":8,"column":63,"nodeType":"Program","fix":{"range":[264,266],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":9,"column":55,"nodeType":"Program","fix":{"range":[320,322],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":10,"column":8,"nodeType":"Identifier","endLine":10,"endColumn":17},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":10,"column":53,"nodeType":"Program","fix":{"range":[374,376],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":11,"column":45,"nodeType":"Program","fix":{"range":[420,422],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":12,"column":47,"nodeType":"Program","fix":{"range":[468,470],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":13,"column":43,"nodeType":"Program","fix":{"range":[512,514],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":14,"column":1,"nodeType":"Program","fix":{"range":[514,516],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":15,"column":34,"nodeType":"Program","fix":{"range":[549,551],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":16,"column":1,"nodeType":"Program","fix":{"range":[551,553],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":17,"column":7,"nodeType":"Identifier","endLine":17,"endColumn":13},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":17,"column":7,"nodeType":"VariableDeclarator","endLine":17,"endColumn":42},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":17,"column":43,"nodeType":"Program","fix":{"range":[595,597],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":18,"column":1,"nodeType":"Program","fix":{"range":[597,599],"text":"\n"}},{"ruleId":"import/first","severity":2,"message":"Import in body of module; reorder to top.","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":80,"fix":{"range":[0,678],"text":"// @flow\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Modal from 'react-responsive-modal';\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport styles from '../Home.css';\r\n\r\nimport updateSettings, { getSettings } from '../../renderers/settings-control';\r\n\r\nconst remote = require('electron').remote;"}},{"ruleId":"import/order","severity":2,"message":"`../../renderers/settings-control` import should occur before import of `electron`","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":80},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":19,"column":80,"nodeType":"Program","fix":{"range":[678,680],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":20,"column":1,"nodeType":"Program","fix":{"range":[680,682],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":21,"column":57,"nodeType":"Program","fix":{"range":[738,740],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":22,"column":16,"nodeType":"Program","fix":{"range":[755,757],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":23,"column":1,"nodeType":"Program","fix":{"range":[757,759],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":24,"column":23,"nodeType":"Program","fix":{"range":[781,783],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":25,"column":18,"nodeType":"Program","fix":{"range":[800,802],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":26,"column":1,"nodeType":"Program","fix":{"range":[802,804],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":27,"column":19,"nodeType":"Program","fix":{"range":[822,824],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":28,"column":31,"nodeType":"Program","fix":{"range":[854,856],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":29,"column":18,"nodeType":"Program","fix":{"range":[873,875],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":30,"column":7,"nodeType":"Program","fix":{"range":[881,883],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":31,"column":45,"nodeType":"Program","fix":{"range":[927,929],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":32,"column":4,"nodeType":"Program","fix":{"range":[932,934],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":33,"column":3,"nodeType":"MethodDefinition","endLine":36,"endColumn":4,"fix":{"range":[932,932],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":33,"column":15,"nodeType":"Program","fix":{"range":[948,950],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":34,"column":20,"nodeType":"MemberExpression","endLine":34,"endColumn":39},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":34,"column":41,"nodeType":"Program","fix":{"range":[990,992],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":35,"column":5,"nodeType":"MemberExpression","endLine":35,"endColumn":30},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":35,"column":32,"nodeType":"Program","fix":{"range":[1023,1025],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":36,"column":4,"nodeType":"Program","fix":{"range":[1028,1030],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":37,"column":3,"nodeType":"ClassProperty","endLine":42,"endColumn":5,"fix":{"range":[1028,1028],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":37,"column":28,"nodeType":"Program","fix":{"range":[1057,1059],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":38,"column":5,"nodeType":"VariableDeclaration","endLine":38,"endColumn":44,"fix":{"range":[1063,1066],"text":"let"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":38,"column":24,"nodeType":"MemberExpression","endLine":38,"endColumn":43},{"ruleId":"react/no-access-state-in-setstate","severity":2,"message":"Use callback in setState when referencing the previous state.","line":38,"column":24,"nodeType":"MemberExpression","endLine":38,"endColumn":34},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":38,"column":44,"nodeType":"Program","fix":{"range":[1102,1104],"text":"\n"}},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":39,"column":11,"nodeType":"VariableDeclarator","endLine":39,"endColumn":35},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":39,"column":35,"nodeType":"Program","fix":{"range":[1138,1140],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":40,"column":40,"nodeType":"Program","fix":{"range":[1179,1181],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":41,"column":33,"nodeType":"Program","fix":{"range":[1213,1215],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":42,"column":5,"nodeType":"Program","fix":{"range":[1219,1221],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":43,"column":1,"nodeType":"Program","fix":{"range":[1221,1223],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":44,"column":13,"nodeType":"Program","fix":{"range":[1235,1237],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":45,"column":13,"nodeType":"Program","fix":{"range":[1249,1251],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":46,"column":12,"nodeType":"Program","fix":{"range":[1262,1264],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":47,"column":15,"nodeType":"Program","fix":{"range":[1278,1280],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":48,"column":17,"nodeType":"MemberExpression","endLine":48,"endColumn":32},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":48,"column":33,"nodeType":"Program","fix":{"range":[1312,1314],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":49,"column":20,"nodeType":"MemberExpression","endLine":49,"endColumn":45},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":49,"column":46,"nodeType":"Program","fix":{"range":[1359,1361],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":50,"column":24,"nodeType":"Program","fix":{"range":[1384,1386],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":51,"column":40,"nodeType":"Program","fix":{"range":[1425,1427],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":52,"column":15,"nodeType":"Program","fix":{"range":[1441,1443],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":53,"column":17,"nodeType":"Program","fix":{"range":[1459,1461],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":54,"column":10,"nodeType":"Program","fix":{"range":[1470,1472],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":55,"column":16,"nodeType":"Program","fix":{"range":[1487,1489],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":56,"column":41,"nodeType":"Program","fix":{"range":[1529,1531],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":57,"column":42,"nodeType":"Program","fix":{"range":[1572,1574],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":58,"column":33,"nodeType":"Program","fix":{"range":[1606,1608],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":59,"column":30,"nodeType":"Program","fix":{"range":[1637,1639],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":60,"column":78,"nodeType":"Program","fix":{"range":[1716,1718],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":61,"column":25,"nodeType":"Program","fix":{"range":[1742,1744],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":62,"column":33,"nodeType":"Program","fix":{"range":[1776,1778],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":63,"column":43,"nodeType":"Program","fix":{"range":[1820,1822],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":64,"column":29,"nodeType":"MemberExpression","endLine":64,"endColumn":48},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":64,"column":66,"nodeType":"Program","fix":{"range":[1887,1889],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":65,"column":49,"nodeType":"Program","fix":{"range":[1937,1939],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":66,"column":34,"nodeType":"Program","fix":{"range":[1972,1974],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":67,"column":51,"nodeType":"Program","fix":{"range":[2024,2026],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":68,"column":23,"nodeType":"Program","fix":{"range":[2048,2050],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":69,"column":21,"nodeType":"Program","fix":{"range":[2070,2072],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":70,"column":31,"nodeType":"Program","fix":{"range":[2102,2104],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":71,"column":22,"nodeType":"Program","fix":{"range":[2125,2127],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":72,"column":33,"nodeType":"Program","fix":{"range":[2159,2161],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":73,"column":30,"nodeType":"Program","fix":{"range":[2190,2192],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":74,"column":72,"nodeType":"Program","fix":{"range":[2263,2265],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":75,"column":25,"nodeType":"Program","fix":{"range":[2289,2291],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":76,"column":34,"nodeType":"Program","fix":{"range":[2324,2326],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":77,"column":30,"nodeType":"Program","fix":{"range":[2355,2357],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":78,"column":36,"nodeType":"MemberExpression","endLine":78,"endColumn":55},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":78,"column":60,"nodeType":"Program","fix":{"range":[2416,2418],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":79,"column":49,"nodeType":"Program","fix":{"range":[2466,2468],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":80,"column":34,"nodeType":"Program","fix":{"range":[2501,2503],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":81,"column":51,"nodeType":"Program","fix":{"range":[2553,2555],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":82,"column":23,"nodeType":"Program","fix":{"range":[2577,2579],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":83,"column":21,"nodeType":"Program","fix":{"range":[2599,2601],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":84,"column":31,"nodeType":"Program","fix":{"range":[2631,2633],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":85,"column":22,"nodeType":"Program","fix":{"range":[2654,2656],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":86,"column":20,"nodeType":"Program","fix":{"range":[2675,2677],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":87,"column":19,"nodeType":"Program","fix":{"range":[2695,2697],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":88,"column":19,"nodeType":"Program","fix":{"range":[2715,2717],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":89,"column":19,"nodeType":"Program","fix":{"range":[2735,2737],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":90,"column":110,"nodeType":"Program","fix":{"range":[2846,2848],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":91,"column":21,"nodeType":"Program","fix":{"range":[2868,2870],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":92,"column":22,"nodeType":"Program","fix":{"range":[2891,2893],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":93,"column":1,"nodeType":"Program","fix":{"range":[2893,2895],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":94,"column":17,"nodeType":"Program","fix":{"range":[2911,2913],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":95,"column":17,"nodeType":"Program","fix":{"range":[2929,2931],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":96,"column":13,"nodeType":"Program","fix":{"range":[2943,2945],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":97,"column":7,"nodeType":"Program","fix":{"range":[2951,2953],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":98,"column":4,"nodeType":"Program","fix":{"range":[2956,2958],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":99,"column":2,"nodeType":"Program","fix":{"range":[2959,2961],"text":"\n"}}],"errorCount":118,"warningCount":0,"fixableErrorCount":103,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/WindowControls.js":{"size":2153,"mtime":1549782184531,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/WindowControls.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":7,"column":7,"nodeType":"Identifier","endLine":7,"endColumn":13},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":7,"column":7,"nodeType":"VariableDeclarator","endLine":7,"endColumn":42},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":10,"column":1,"nodeType":"Line","endLine":10,"endColumn":72,"fix":{"range":[224,224],"text":" "}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'windowMaximize'.","line":23,"column":17,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":30,"endColumn":4},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":24,"column":5,"nodeType":"VariableDeclaration","endLine":24,"endColumn":51,"fix":{"range":[547,550],"text":"let"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":31,"column":3,"nodeType":"MethodDefinition","endLine":34,"endColumn":4,"fix":{"range":[702,702],"text":"\n"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'windowMinimize'.","line":31,"column":17,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":34,"endColumn":4},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":32,"column":5,"nodeType":"VariableDeclaration","endLine":32,"endColumn":51,"fix":{"range":[728,731],"text":"let"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":35,"column":3,"nodeType":"MethodDefinition","endLine":38,"endColumn":4,"fix":{"range":[801,801],"text":"\n"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'windowClose'.","line":35,"column":14,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":38,"endColumn":4},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":36,"column":5,"nodeType":"VariableDeclaration","endLine":36,"endColumn":51,"fix":{"range":[824,827],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'increment' is assigned a value but never used.","line":42,"column":7,"nodeType":"Identifier","endLine":42,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementIfOdd' is assigned a value but never used.","line":43,"column":7,"nodeType":"Identifier","endLine":43,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementAsync' is assigned a value but never used.","line":44,"column":7,"nodeType":"Identifier","endLine":44,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'decrement' is assigned a value but never used.","line":45,"column":7,"nodeType":"Identifier","endLine":45,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'counter' is assigned a value but never used.","line":46,"column":7,"nodeType":"Identifier","endLine":46,"endColumn":14},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Static HTML elements with event handlers require a role.","line":52,"column":11,"nodeType":"JSXOpeningElement","endLine":52,"endColumn":100},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":52,"column":11,"nodeType":"JSXOpeningElement","endLine":52,"endColumn":100},{"ruleId":"react/self-closing-comp","severity":2,"message":"Empty components are self-closing","line":54,"column":15,"nodeType":"JSXOpeningElement","endLine":54,"endColumn":115,"fix":{"range":[1455,1466],"text":" />"}},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Static HTML elements with event handlers require a role.","line":57,"column":11,"nodeType":"JSXOpeningElement","endLine":57,"endColumn":99},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":57,"column":11,"nodeType":"JSXOpeningElement","endLine":57,"endColumn":99},{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'class' found, use 'className' instead","line":58,"column":18,"nodeType":"JSXAttribute","endLine":58,"endColumn":40,"fix":{"range":[1619,1624],"text":"className"}},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Static HTML elements with event handlers require a role.","line":62,"column":11,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":99},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":62,"column":11,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":99},{"ruleId":"react/self-closing-comp","severity":2,"message":"Empty components are self-closing","line":64,"column":17,"nodeType":"JSXOpeningElement","endLine":64,"endColumn":75,"fix":{"range":[2067,2075],"text":" />"}}],"errorCount":26,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/PrismaticInterpreter.js":{"size":8410,"mtime":1553224545430,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/PrismaticInterpreter.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'routes' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","endLine":4,"endColumn":14},{"ruleId":"import/order","severity":2,"message":"`terminal-in-react` import should occur before import of `../constants/routes.json`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":42,"fix":{"range":[92,215],"text":"import Terminal from 'terminal-in-react';\nimport routes from '../constants/routes.json';\nimport styles from './Home.css';\n\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":14,"column":7,"nodeType":"Identifier","endLine":14,"endColumn":13},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":14,"column":7,"nodeType":"VariableDeclarator","endLine":14,"endColumn":42},{"ruleId":"import/order","severity":2,"message":"`../renderers/settings-control` import should occur before import of `electron`","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":61},{"ruleId":"import/first","severity":2,"message":"Import in body of module; reorder to top.","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":61,"fix":{"range":[0,498],"text":"// @flow\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport routes from '../constants/routes.json';\nimport styles from './Home.css';\n\nimport Terminal from 'terminal-in-react';\nimport SessionTracker from '../utils/SessionTracker';\n\nimport MenuBar from './MenuBar';\nimport WindowControls from './WindowControls';\nimport SessionTable from './SessionTable';\n\nimport { getSettings } from '../renderers/settings-control';\n\nconst remote = require('electron').remote;"}},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'hideCompleted'","line":32,"column":8,"nodeType":"Property","endLine":32,"endColumn":28},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'agentid'","line":35,"column":8,"nodeType":"Property","endLine":35,"endColumn":19},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'task'","line":36,"column":8,"nodeType":"Property","endLine":36,"endColumn":16},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'tabs'","line":41,"column":8,"nodeType":"Property","endLine":41,"endColumn":16},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":45,"column":3,"nodeType":"MethodDefinition","endLine":101,"endColumn":4,"fix":{"range":[1007,1007],"text":"\n"}},{"ruleId":"promise/catch-or-return","severity":2,"message":"Expected catch() or return","line":47,"column":7,"nodeType":"ExpressionStatement","endLine":61,"endColumn":9},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":47,"column":13,"nodeType":"BinaryExpression","endLine":47,"endColumn":78,"fix":{"range":[1084,1149],"text":"`http://${  this.state.settings.emergenceServer  }:29001/api/c2`"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":47,"column":25,"nodeType":"MemberExpression","endLine":47,"endColumn":44},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":62,"column":7,"nodeType":"Line","endLine":62,"endColumn":22,"fix":{"range":[1518,1518],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":63,"column":7,"nodeType":"Line","endLine":63,"endColumn":31,"fix":{"range":[1540,1540],"text":" "}},{"ruleId":"promise/catch-or-return","severity":2,"message":"Expected catch() or return","line":64,"column":7,"nodeType":"ExpressionStatement","endLine":77,"endColumn":9},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":64,"column":13,"nodeType":"BinaryExpression","endLine":64,"endColumn":84,"fix":{"range":[1575,1646],"text":"`http://${  this.state.settings.emergenceServer  }:29001/api/sessions`"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":64,"column":25,"nodeType":"MemberExpression","endLine":64,"endColumn":44},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":78,"column":7,"nodeType":"VariableDeclaration","endLine":78,"endColumn":39},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":78,"column":7,"nodeType":"VariableDeclaration","endLine":78,"endColumn":39,"fix":{"range":[1993,1996],"text":"let"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":78,"column":16,"nodeType":"MemberExpression","endLine":78,"endColumn":38},{"ruleId":"array-callback-return","severity":2,"message":"Expected to return a value in function.","line":85,"column":29,"nodeType":"FunctionExpression","messageId":"expectedInside"},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":85,"column":29,"nodeType":"FunctionExpression","endLine":98,"endColumn":10,"fix":{"range":[2195,2617],"text":"(key) => {\n          //console.log(key)\n          //console.log(Object.keys(sessions).length)\n          if (key >= Object.keys(sessions).length) {\n            addSession({\n                aid: dm[key].agentid,\n                type: dm[key].type,\n                name: \"\",\n                user: dm[key].user,\n                delay: dm[key].delay,\n                last: dm[key].last\n            })\n          }\n        }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":85,"column":29,"nodeType":"FunctionExpression","endLine":98,"endColumn":10},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":86,"column":11,"nodeType":"Line","endLine":86,"endColumn":29,"fix":{"range":[2223,2223],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":87,"column":11,"nodeType":"Line","endLine":87,"endColumn":54,"fix":{"range":[2252,2252],"text":" "}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":102,"column":3,"nodeType":"MethodDefinition","endLine":104,"endColumn":4,"fix":{"range":[2645,2645],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":107,"column":9,"nodeType":"MemberExpression","endLine":107,"endColumn":32},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":107,"column":33,"nodeType":"BinaryExpression","messageId":"unexpected"},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":113,"column":3,"nodeType":"Line","endLine":113,"endColumn":23,"fix":{"range":[2895,2895],"text":" "}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":114,"column":3,"nodeType":"MethodDefinition","endLine":144,"endColumn":4,"fix":{"range":[2890,2890],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":115,"column":5,"nodeType":"Line","endLine":115,"endColumn":38,"fix":{"range":[2943,2943],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":116,"column":5,"nodeType":"VariableDeclaration","endLine":116,"endColumn":32,"fix":{"range":[2979,2982],"text":"let"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":118,"column":5,"nodeType":"Line","endLine":118,"endColumn":39,"fix":{"range":[3014,3014],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":119,"column":5,"nodeType":"VariableDeclaration","endLine":119,"endColumn":53,"fix":{"range":[3051,3054],"text":"let"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":121,"column":5,"nodeType":"Line","endLine":121,"endColumn":23,"fix":{"range":[3107,3107],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":122,"column":5,"nodeType":"VariableDeclaration","endLine":122,"endColumn":21,"fix":{"range":[3128,3131],"text":"let"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":123,"column":9,"nodeType":"Identifier","endLine":123,"endColumn":13,"fix":{"range":[3149,3152],"text":"const"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":123,"column":16,"nodeType":"MemberExpression","endLine":123,"endColumn":35},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":124,"column":5,"nodeType":"VariableDeclaration","endLine":129,"endColumn":8,"fix":{"range":[3184,3187],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sessionDetails' is assigned a value but never used.","line":124,"column":9,"nodeType":"Identifier","endLine":124,"endColumn":23},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":124,"column":48,"nodeType":"FunctionExpression","endLine":129,"endColumn":6,"fix":{"range":[3227,3366],"text":"(key) => {\n        if (data[key].id == sid) {\n          agentid = data[key].aid\n          //console.log(data[key].aid)\n        }\n    }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":124,"column":48,"nodeType":"FunctionExpression","endLine":129,"endColumn":6},{"ruleId":"array-callback-return","severity":2,"message":"Expected to return a value in function.","line":124,"column":48,"nodeType":"FunctionExpression","messageId":"expectedInside"},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":125,"column":26,"nodeType":"BinaryExpression","messageId":"unexpected"},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":127,"column":11,"nodeType":"Line","endLine":127,"endColumn":39,"fix":{"range":[3324,3324],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":130,"column":5,"nodeType":"Line","endLine":130,"endColumn":49,"fix":{"range":[3375,3375],"text":" "}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":132,"column":11,"nodeType":"BinaryExpression","endLine":132,"endColumn":78,"fix":{"range":[3429,3496],"text":"`http://${  this.state.settings.emergenceServer  }:29001/api/task`"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":132,"column":23,"nodeType":"MemberExpression","endLine":132,"endColumn":42},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":141,"column":9,"nodeType":"Property","endLine":141,"endColumn":17,"fix":{"range":[3729,3737],"text":"cmd"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":148,"column":11,"nodeType":"MemberExpression","endLine":148,"endColumn":31},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":148,"column":39,"nodeType":"BinaryExpression","messageId":"unexpected"},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":148,"column":42,"nodeType":"MemberExpression","endLine":148,"endColumn":59},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":149,"column":26,"nodeType":"MemberExpression","endLine":149,"endColumn":43},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":151,"column":22,"nodeType":"MemberExpression","endLine":151,"endColumn":39},{"ruleId":"react/no-access-state-in-setstate","severity":2,"message":"Use callback in setState when referencing the previous state.","line":151,"column":22,"nodeType":"MemberExpression","endLine":151,"endColumn":32},{"ruleId":"prefer-const","severity":2,"message":"'tmptmp' is never reassigned. Use 'const' instead.","line":155,"column":11,"nodeType":"Identifier","endLine":155,"endColumn":17,"fix":{"range":[4018,4021],"text":"const"}},{"ruleId":"no-unused-vars","severity":2,"message":"'tmptmp' is assigned a value but never used.","line":155,"column":11,"nodeType":"Identifier","endLine":155,"endColumn":17},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":158,"column":3,"nodeType":"MethodDefinition","endLine":186,"endColumn":4,"fix":{"range":[4043,4043],"text":"\n"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":160,"column":9,"nodeType":"Identifier","endLine":160,"endColumn":13,"fix":{"range":[4068,4071],"text":"const"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":160,"column":16,"nodeType":"MemberExpression","endLine":160,"endColumn":35},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":167,"column":5,"nodeType":"VariableDeclaration","endLine":167,"endColumn":28,"fix":{"range":[4365,4368],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":167,"column":5,"nodeType":"VariableDeclaration","endLine":167,"endColumn":28},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":168,"column":5,"nodeType":"VariableDeclaration","endLine":180,"endColumn":8,"fix":{"range":[4393,4396],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":168,"column":5,"nodeType":"VariableDeclaration","endLine":180,"endColumn":8},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":168,"column":48,"nodeType":"FunctionExpression","endLine":180,"endColumn":6,"fix":{"range":[4436,5378],"text":"(key) => {\n      var sessionInfo = ''\n      if (data[key].id != null) {sessionInfo += data[key].id.toString().padEnd(5, \" \")} else {sessionInfo += \"     \"}\n      if (data[key].type != null) {sessionInfo += data[key].type.toString().padEnd(19, \" \")} else {sessionInfo += \"                   \"}\n      if (data[key].name != null) {sessionInfo += data[key].name.toString().padEnd(14, \" \")} else {sessionInfo += \"             \"}\n      if (data[key].user != null) {sessionInfo += data[key].user.toString().padEnd(20, \" \")} else {sessionInfo += \"                   \"}\n      if (data[key].delay != null) {sessionInfo += data[key].delay.toString().padEnd(7, \" \")} else {sessionInfo += \"       \"}\n      if (data[key].last != null) {sessionInfo += data[key].last.toString().padEnd(10, \" \")} else {sessionInfo += \"          \"}\n\n      console.log(sessionInfo);\n      activeSessions++;\n      //return [Number(key), data[key].id, data[key].dead];\n    }"}},{"ruleId":"array-callback-return","severity":2,"message":"Expected to return a value in function.","line":168,"column":48,"nodeType":"FunctionExpression","messageId":"expectedInside"},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":168,"column":48,"nodeType":"FunctionExpression","endLine":180,"endColumn":6},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":169,"column":7,"nodeType":"VariableDeclaration","endLine":169,"endColumn":27,"fix":{"range":[4458,4461],"text":"let"}},{"ruleId":"no-plusplus","severity":2,"message":"Unary operator '++' used.","line":178,"column":7,"nodeType":"UpdateExpression","endLine":178,"endColumn":23},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":179,"column":7,"nodeType":"Line","endLine":179,"endColumn":60,"fix":{"range":[5321,5321],"text":" "}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":183,"column":17,"nodeType":"BinaryExpression","endLine":183,"endColumn":65,"fix":{"range":[5418,5466],"text":"`There are ${  activeSessions  } active agents`"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'handleChange'.","line":188,"column":15,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":190,"endColumn":4},{"ruleId":"no-unused-vars","severity":2,"message":"'addSession' is assigned a value but never used.","line":197,"column":7,"nodeType":"Identifier","endLine":197,"endColumn":17},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":204,"column":11,"nodeType":"MemberExpression","endLine":204,"endColumn":34},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":204,"column":61,"nodeType":"MemberExpression","endLine":204,"endColumn":80},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":222,"column":20,"nodeType":"Property","endLine":222,"endColumn":38,"fix":{"range":[6340,6358],"text":"sessions"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":229,"column":28,"nodeType":"MemberExpression","endLine":229,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":246,"column":28,"nodeType":"Identifier","endLine":246,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'print' is defined but never used.","line":246,"column":34,"nodeType":"Identifier","endLine":246,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'runCommand' is defined but never used.","line":246,"column":41,"nodeType":"Identifier","endLine":246,"endColumn":51},{"ruleId":"prefer-const","severity":2,"message":"'ret' is never reassigned. Use 'const' instead.","line":247,"column":25,"nodeType":"Identifier","endLine":247,"endColumn":28,"fix":{"range":[7204,7207],"text":"const"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ret' is assigned a value but never used.","line":247,"column":25,"nodeType":"Identifier","endLine":247,"endColumn":28},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":248,"column":21,"nodeType":"Line","endLine":248,"endColumn":33,"fix":{"range":[7256,7256],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'print' is defined but never used.","line":254,"column":34,"nodeType":"Identifier","endLine":254,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'runCommand' is defined but never used.","line":254,"column":41,"nodeType":"Identifier","endLine":254,"endColumn":51},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'task'","line":256,"column":24,"nodeType":"Property","endLine":256,"endColumn":39},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'agentid'","line":257,"column":24,"nodeType":"Property","endLine":257,"endColumn":51},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":257,"column":33,"nodeType":"MemberExpression","endLine":257,"endColumn":51},{"ruleId":"react/no-access-state-in-setstate","severity":2,"message":"Use callback in setState when referencing the previous state.","line":257,"column":33,"nodeType":"MemberExpression","endLine":257,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'print' is defined but never used.","line":263,"column":34,"nodeType":"Identifier","endLine":263,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'runCommand' is defined but never used.","line":263,"column":41,"nodeType":"Identifier","endLine":263,"endColumn":51},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":265,"column":32,"nodeType":"BinaryExpression","endLine":265,"endColumn":73,"fix":{"range":[7777,7818],"text":"`PROMPT(${  args._[0].toString()  }) > `"}}],"errorCount":92,"warningCount":3,"fixableErrorCount":40,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/PageTemplate.js":{"size":590,"mtime":1549766150963,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/PageTemplate.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'increment' is assigned a value but never used.","line":20,"column":7,"nodeType":"Identifier","endLine":20,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementIfOdd' is assigned a value but never used.","line":21,"column":7,"nodeType":"Identifier","endLine":21,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementAsync' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","endLine":22,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'decrement' is assigned a value but never used.","line":23,"column":7,"nodeType":"Identifier","endLine":23,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'counter' is assigned a value but never used.","line":24,"column":7,"nodeType":"Identifier","endLine":24,"endColumn":14}],"errorCount":6,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/MenuBar.js":{"size":7285,"mtime":1553274168829,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/MenuBar.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'FormHelperText' is defined but never used.","line":11,"column":8,"nodeType":"Identifier","endLine":11,"endColumn":22},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":24,"column":7,"nodeType":"VariableDeclarator","endLine":24,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":24,"column":7,"nodeType":"Identifier","endLine":24,"endColumn":13},{"ruleId":"import/order","severity":2,"message":"`../renderers/backdoor-factory` import should occur before import of `electron`","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":62},{"ruleId":"import/first","severity":2,"message":"Import in body of module; reorder to top.","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":62,"fix":{"range":[0,979],"text":"// @flow\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faIndustry, faTerminal, faBars, faBug, faKey, faServer, faRadiation, faHeadphones, faTable } from '@fortawesome/free-solid-svg-icons';\nimport ReactTooltip from 'react-tooltip';\nimport Modal from 'react-responsive-modal';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport Loader from 'react-loader-spinner';\n\nimport Settings from './menus/Settings';\n\nimport styles from './Home.css';\n\nimport payloadGenerator from '../renderers/backdoor-factory';\n\nconst remote = require('electron').remote;"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":46,"column":9,"nodeType":"MemberExpression","endLine":46,"endColumn":32},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":46,"column":33,"nodeType":"BinaryExpression","messageId":"unexpected"},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":52,"column":3,"nodeType":"MethodDefinition","endLine":54,"endColumn":4,"fix":{"range":[1478,1478],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":55,"column":3,"nodeType":"MethodDefinition","endLine":57,"endColumn":4,"fix":{"range":[1543,1543],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":58,"column":3,"nodeType":"MethodDefinition","endLine":62,"endColumn":4,"fix":{"range":[1610,1610],"text":"\n"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":61,"column":22,"nodeType":"MemberExpression","endLine":61,"endColumn":40},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":63,"column":3,"nodeType":"MethodDefinition","endLine":68,"endColumn":4,"fix":{"range":[1734,1734],"text":"\n"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function 'bind'.","line":65,"column":16,"nodeType":"FunctionExpression","endLine":67,"endColumn":6},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":65,"column":16,"nodeType":"FunctionExpression","endLine":67,"endColumn":6,"fix":{"range":[1804,1925],"text":"() => { //Start the timer\n      this.setState({loader: false}) //After 1 second, set render to true\n    }"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":65,"column":29,"nodeType":"Line","endLine":65,"endColumn":46,"fix":{"range":[1819,1819],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":66,"column":38,"nodeType":"Line","endLine":66,"endColumn":74,"fix":{"range":[1874,1874],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'increment' is assigned a value but never used.","line":76,"column":7,"nodeType":"Identifier","endLine":76,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementIfOdd' is assigned a value but never used.","line":77,"column":7,"nodeType":"Identifier","endLine":77,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'incrementAsync' is assigned a value but never used.","line":78,"column":7,"nodeType":"Identifier","endLine":78,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'decrement' is assigned a value but never used.","line":79,"column":7,"nodeType":"Identifier","endLine":79,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'counter' is assigned a value but never used.","line":80,"column":7,"nodeType":"Identifier","endLine":80,"endColumn":14},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":88,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","fix":{"range":[2297,2588],"text":"(\n        <div>\n          <Loader\n             type=\"Audio\"\n             color=\"#00BFFF\"\n             height=\"100\"\n             width=\"100\"\n          />\n          <h3 className={styles.terminalText}>Saving payload to engagement directory...</h3>\n        </div>\n        )"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":104,"column":12,"nodeType":"MemberExpression","endLine":104,"endColumn":29},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":109,"column":61,"nodeType":"MemberExpression","endLine":109,"endColumn":87},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":112,"column":63,"nodeType":"MemberExpression","endLine":112,"endColumn":89},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":154,"column":30,"nodeType":"MemberExpression","endLine":154,"endColumn":48},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":184,"column":37,"nodeType":"MemberExpression","endLine":184,"endColumn":56},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring state assignment","line":218,"column":10,"nodeType":"MemberExpression","endLine":218,"endColumn":33}],"errorCount":28,"warningCount":1,"fixableErrorCount":9,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/main.prod.js":{"size":97636,"mtime":1550370438758,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/main.prod.js","messages":[{"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override."}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/renderers/settings-control.js":{"size":1159,"mtime":1553218733110,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/renderers/settings-control.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ipcRenderer' is assigned a value but never used.","line":1,"column":9,"nodeType":"Identifier","endLine":1,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'remote' is assigned a value but never used.","line":1,"column":22,"nodeType":"Identifier","endLine":1,"endColumn":28},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":1,"column":53,"nodeType":"Program","fix":{"range":[52,54],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'exec' is assigned a value but never used.","line":2,"column":9,"nodeType":"Identifier","endLine":2,"endColumn":13},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":2,"column":43,"nodeType":"Program","fix":{"range":[96,98],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","endLine":3,"endColumn":24,"fix":{"range":[98,101],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":3,"column":24,"nodeType":"Program","fix":{"range":[121,123],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":4,"column":1,"nodeType":"VariableDeclaration","endLine":4,"endColumn":28,"fix":{"range":[123,126],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":4,"column":28,"nodeType":"Program","fix":{"range":[150,152],"text":"\n"}},{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":5,"column":1,"nodeType":null,"fix":{"range":[192,192],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":5,"column":41,"nodeType":"Program","fix":{"range":[192,194],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","endLine":6,"endColumn":49,"fix":{"range":[194,197],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":6,"column":49,"nodeType":"Program","fix":{"range":[242,244],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","endLine":7,"endColumn":70,"fix":{"range":[244,247],"text":"let"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":7,"column":70,"nodeType":"Program","fix":{"range":[313,315],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":8,"column":1,"nodeType":"Program","fix":{"range":[315,317],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":9,"column":54,"nodeType":"Program","fix":{"range":[370,372],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":10,"column":1,"nodeType":"Program","fix":{"range":[372,374],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":11,"column":3,"nodeType":"Line","endLine":11,"endColumn":30,"fix":{"range":[378,378],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":11,"column":30,"nodeType":"Program","fix":{"range":[403,405],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":12,"column":3,"nodeType":"Line","endLine":12,"endColumn":29,"fix":{"range":[409,409],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":12,"column":29,"nodeType":"Program","fix":{"range":[433,435],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":13,"column":1,"nodeType":"Program","fix":{"range":[435,437],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":14,"column":34,"nodeType":"Program","fix":{"range":[470,472],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":15,"column":30,"nodeType":"Program","fix":{"range":[501,503],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":16,"column":52,"nodeType":"Program","fix":{"range":[554,556],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":17,"column":4,"nodeType":"Program","fix":{"range":[559,561],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":18,"column":1,"nodeType":"Program","fix":{"range":[561,563],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":19,"column":3,"nodeType":"Line","endLine":19,"endColumn":30,"fix":{"range":[567,567],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":19,"column":30,"nodeType":"Program","fix":{"range":[592,594],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":20,"column":3,"nodeType":"Line","endLine":20,"endColumn":61,"fix":{"range":[598,598],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":20,"column":61,"nodeType":"Program","fix":{"range":[654,656],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":21,"column":3,"nodeType":"Line","endLine":21,"endColumn":25,"fix":{"range":[660,660],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":21,"column":25,"nodeType":"Program","fix":{"range":[680,682],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":22,"column":1,"nodeType":"Program","fix":{"range":[682,684],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":23,"column":1,"nodeType":"Program","fix":{"range":[684,686],"text":"\n"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":24,"column":59,"nodeType":"FunctionExpression","endLine":30,"endColumn":4},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":24,"column":59,"nodeType":"FunctionExpression","endLine":30,"endColumn":4,"fix":{"range":[744,877],"text":"(err) => {\r\n    if(err) {\r\n        return console.log(err);\r\n    }\r\n\r\n    console.log(\"Prismatica configuration updated!\");\r\n  }"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":24,"column":74,"nodeType":"Program","fix":{"range":[759,761],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":25,"column":14,"nodeType":"Program","fix":{"range":[774,776],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":26,"column":33,"nodeType":"Program","fix":{"range":[808,810],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":27,"column":6,"nodeType":"Program","fix":{"range":[815,817],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":28,"column":1,"nodeType":"Program","fix":{"range":[817,819],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":29,"column":54,"nodeType":"Program","fix":{"range":[872,874],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":30,"column":6,"nodeType":"Program","fix":{"range":[879,881],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":31,"column":2,"nodeType":"Program","fix":{"range":[882,884],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":32,"column":1,"nodeType":"Program","fix":{"range":[884,886],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":33,"column":32,"nodeType":"Program","fix":{"range":[917,919],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":34,"column":1,"nodeType":"Program","fix":{"range":[919,921],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":35,"column":34,"nodeType":"Program","fix":{"range":[954,956],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":36,"column":30,"nodeType":"Program","fix":{"range":[985,987],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":37,"column":52,"nodeType":"Program","fix":{"range":[1038,1040],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":38,"column":4,"nodeType":"Program","fix":{"range":[1043,1045],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":39,"column":1,"nodeType":"Program","fix":{"range":[1045,1047],"text":"\n"}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":40,"column":3,"nodeType":"Line","endLine":40,"endColumn":30,"fix":{"range":[1051,1051],"text":" "}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":40,"column":30,"nodeType":"Program","fix":{"range":[1076,1078],"text":"\n"}},{"ruleId":"prefer-const","severity":2,"message":"'curconf' is never reassigned. Use 'const' instead.","line":41,"column":7,"nodeType":"Identifier","endLine":41,"endColumn":14,"fix":{"range":[1080,1083],"text":"const"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":41,"column":59,"nodeType":"Program","fix":{"range":[1136,1138],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":42,"column":17,"nodeType":"Program","fix":{"range":[1154,1156],"text":"\n"}},{"ruleId":"linebreak-style","severity":2,"message":"Expected linebreaks to be 'LF' but found 'CRLF'.","line":43,"column":2,"nodeType":"Program","fix":{"range":[1157,1159],"text":"\n"}}],"errorCount":59,"warningCount":1,"fixableErrorCount":56,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/SessionTable.js":{"size":2203,"mtime":1553272387102,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/components/SessionTable.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","endLine":3,"endColumn":14},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'order'","line":19,"column":7,"nodeType":"Property","endLine":19,"endColumn":19},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'orderBy'","line":20,"column":7,"nodeType":"Property","endLine":20,"endColumn":26},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'selected'","line":21,"column":7,"nodeType":"Property","endLine":21,"endColumn":19},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'page'","line":22,"column":7,"nodeType":"Property","endLine":22,"endColumn":14},{"ruleId":"react/no-unused-state","severity":2,"message":"Unused state field: 'rowsPerPage'","line":23,"column":7,"nodeType":"Property","endLine":23,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":38,"column":27,"nodeType":"Identifier","endLine":38,"endColumn":32},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":38,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","fix":{"range":[809,926],"text":"(\n            <FontAwesomeIcon className={styles.osfont} icon={faWindows} />\n          )"}},{"ruleId":"prefer-const","severity":2,"message":"'rows' is never reassigned. Use 'const' instead.","line":96,"column":9,"nodeType":"Identifier","endLine":96,"endColumn":13,"fix":{"range":[1748,1751],"text":"const"}},{"ruleId":"react/destructuring-assignment","severity":2,"message":"Must use destructuring props assignment","line":96,"column":16,"nodeType":"MemberExpression","endLine":96,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":96,"column":50,"nodeType":"Identifier","endLine":96,"endColumn":55},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":96,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","fix":{"range":[1803,1931],"text":"[session.name, \"192.168.86.222\", \"192.168.86.223\", session.user, session.user, session.note, session.last]"}},{"ruleId":"react/jsx-curly-brace-presence","severity":2,"message":"Curly braces are unnecessary here.","line":103,"column":19,"nodeType":"JSXExpressionContainer","endLine":103,"endColumn":38,"fix":{"range":[2038,2057],"text":"\"Active Sessions\""}}],"errorCount":13,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"},"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/main.dev.js":{"size":2389,"mtime":1553539385163,"results":{"filePath":"/mnt/c/Projects/Prismatica/Diagon/src/diagon-ui/app/main.dev.js","messages":[{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":16,"column":1,"nodeType":null,"fix":{"range":[524,524],"text":"\n"}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},"hashOfConfig":"cfglpq"}}